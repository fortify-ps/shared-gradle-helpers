/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/

apply plugin: 'java'

/*
 Define extra properties
*/
ext {
    sscParserPluginVersionRegex = '(\\d+)(\\.\\d+)*'
}


/*
 Define compileExport configuration
*/
configurations {
    implementationExport
    implementation.extendsFrom (implementationExport)
}

/*
 Define standard SSC parser plugin dependencies
*/
dependencies {
    // dependencies provided by plugin runtime
    implementation 'com.fortify.plugin:plugin-api:1.0.1.1'
    implementation 'org.slf4j:slf4j-api:1.7.36'
}

/*
 Add the following functionality when generating plugin jar:
 - Check configured plugin version against regular expression
 - Replace plugin version number in plugin.xml file with configured plugin version
 - Add all files from compileExport dependencies
*/
jar {
    doFirst {
        // check if version matches requirements
        if (!sscParserPluginVersion.matches(sscParserPluginVersionRegex)) {
            throw new InvalidUserDataException("Plugin version '$sscParserPluginVersion' does not match '$sscParserPluginVersionRegex'")
        }
    }
    // replace version placeholders in plugin.xml
    filesMatching('plugin.xml') {
        filter {
            it.replaceAll('<!--VERSION-->.*?<!--/VERSION-->', sscParserPluginVersion)
        }
    }

	duplicatesStrategy = 'exclude'
    // include files from compileExport dependencies
    from {
		configurations.implementationExport.collect { 
    		it.isDirectory() ? it : zipTree(it).matching { 
    			exclude 'META-INF/*' 
    			exclude 'module-info.class' // Avoid duplicate entries from recent Jackson libraries 
    		} 
    	} 
    }
}

