/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
 
/*
 This helper script defines a readme2html task that converts the project
 README.md to ${buildDir}/html/README.md
 
 Requirements:
	 plugins {
		id "org.kordamp.gradle.markdown" version "2.2.0"
	 }
	 
	 ext {
		gradleHelpersLocation = "https://raw.githubusercontent.com/fortify-ps/gradle-helpers/main"
		//gradleHelpersLocation = "file:../gradle-helpers"
	 }
	 
	 task copyMarkdown(type: Copy) {
		from("${projectDir}") {
			include <markdown-file(s)>
		}
		into "${m2hSourceDir}"
	 }
*/

ext {
	m2hSourceDir = "${buildDir}/m2h-rawMarkdown"
	m2hProcessedDir = "${buildDir}/m2h-processedMarkdown"
	m2hOutputDir = "${buildDir}/m2h-html"
}

class MarkdownToHtmlHelper {
    static final REGEX_INCLUDE=/(?i)^\s*<X-INCLUDE url="(\S+)"\s*\/>\s*$/
    static final REGEX_INSERT=/(?i)^\s*<X-INSERT text="(\S+)"\s*\/>\s*$/
    static final REGEX_XTAG=/(?i)<(\/?)X-TAG-/
    static final REGEX_PRP_REF=/\$\{(\S+)\}/
    
    static final replacePropertyReferences(project, text) {
    	// TODO Any better way for doing property expansion? 
    	return text.replaceAll(REGEX_PRP_REF) { _, prp -> project.properties[prp] }
    }
    
    static final replaceIncludes(project, text) {
    	return text.replaceAll(REGEX_INCLUDE) { _, url ->
			def evaluatedUrl = replacePropertyReferences(project, url)
			println "Including "+evaluatedUrl
			return evaluatedUrl.toURL().getText("cp1252") //TODO How to determine source file charset?
		}
    }
    
    static final replaceInserts(project, text) {
    	return text.replaceAll(REGEX_INSERT) { _, textToInsert ->
			def evaluatedTextToInsert = replacePropertyReferences(project, textToInsert)
			return evaluatedTextToInsert
		}
    }
    
    static final replaceXTags(project, text) {
    	text.replaceAll(REGEX_XTAG, '<$1')
    }
}

task processMarkdown(type: Copy) {
	from("${m2hSourceDir}")
	filter { line ->
		line = MarkdownToHtmlHelper.replaceIncludes(project, line)
		line = MarkdownToHtmlHelper.replaceInserts(project, line)
		line = MarkdownToHtmlHelper.replaceXTags(project, line)
	}
	into "${m2hProcessedDir}"
}
processMarkdown.dependsOn 'copyMarkdown'

markdownToHtml.sourceDir=file("${m2hProcessedDir}")
markdownToHtml.outputDir=file("${m2hOutputDir}")
markdownToHtml.configuration=[
	hardwraps: false,
	removeHtml: false,
	autoLinks: true,
	abbreviations: true,
	definitionLists: true,
	smartQuotes: true,
	smartPunctuation: true,
	fencedCodeBlocks: true,
	tables: true
]
markdownToHtml.dependsOn 'processMarkdown'